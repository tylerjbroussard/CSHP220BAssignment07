using System;
using System.Collections.Generic;

//in Models as a class not a struct
struct ItemData
{
    public object ItemCode;
    public string Description;
    public double PricePerItem;
    public int QuantityOnHand;
    public double OurCostPerItem;
    public double ValueOfItem;

}

class Program
{
    static string itemCode;
    static string description;
    static double pricePerItem;
    static int quantityOnHand;
    static double ourCostPerItem;
    static double valueOfItem;

    public static void QuestionSystem()
    {
        int switchController = 0;

        while (true)
        {
            switch (switchController)
            {
                case 0:   

                    Console.Write("Please enter the Item Number: ");
                    itemCode = Console.ReadLine();
                    Console.WriteLine("----> {0}", itemCode);
                    switchController++;
                        break;

                case 1:

                    Console.Write("Please enter the Item Description: ");
                    description = Console.ReadLine();
                    Console.WriteLine("----> {0}", itemCode);
                    switchController++;
                        break;

                case 2:

                    Console.Write("Please enter the Price per Item: ");
                    string pricePerItemString = Console.ReadLine();
                    if (Double.TryParse(pricePerItemString, out pricePerItem))
                    {
                        Console.WriteLine("----> {0}", pricePerItem);
                        switchController++;
                    }
                    else
                    {
                        Console.WriteLine("Please enter integers only into this field and try again");                           
                    }
                        break;

                case 3:

                    Console.Write("Please enter the Quantity on Hand: ");
                    string quantityOnHandString = Console.ReadLine();
                    if (int.TryParse(quantityOnHandString, out quantityOnHand))
                    {
                        Console.WriteLine("----> {0}", quantityOnHand);
                        switchController++;
                    }
                    else
                    {
                        Console.WriteLine("Please enter integers only into this field and try again");
                        
                    }
                        break;

                case 4:

                    Console.Write("Please enter our Cost Per Item: ");
                    string ourCostPerItemString = Console.ReadLine();
                    if (Double.TryParse(ourCostPerItemString, out ourCostPerItem))
                    {
                        Console.WriteLine("----> {0}", ourCostPerItem);
                        switchController++;
                    }
                    else
                    {
                        Console.WriteLine("Please enter integers only into this field and try again");
                       
                    }
                        break;

                case 5:

                    valueOfItem = pricePerItem * quantityOnHand;
                    Console.WriteLine("Value of Item ----> {0}", valueOfItem);
                        return;
            }
        }
    }

    public static void Main()
    {
        List<ItemData> itemData = new List<ItemData>
        {
            Capacity = 100
        };

        while (true)
        {
            Console.Write("---------------------------------------------------------------------------\n|   Main Menu   |\n[1] Add an item\n[2] Change an item\n[3] Delete an item\n[4] List all items\n[5] Quit\n\nCoose an option: ");
        
            string userInputString = Console.ReadLine();           

            Console.WriteLine("---------------------------------------------------------------------------"); 

            switch (userInputString)
            {
                case "1": // add an item
                    {
                        QuestionSystem();
                        itemData.Add(new ItemData() { ItemCode = itemCode, Description = description, PricePerItem = pricePerItem, QuantityOnHand = quantityOnHand, OurCostPerItem = ourCostPerItem, ValueOfItem = valueOfItem });
                        
                        break;
                    }

                case "2": //change an item
                    {    
                        Console.Write("Please enter an the item ID No you wish to change:");
                        string changeitemCode = Console.ReadLine();
                        bool itemFound = false;
                        
                        for (int x = 0; x < itemData.Count; x++)
                        {
                            if (itemData[x].ItemCode.ToString() == changeitemCode)
                            {
                                itemFound = true;

                                itemData.RemoveAt(x);

                                QuestionSystem();

                                itemData.Add(new ItemData() { ItemCode = itemCode, Description = description, PricePerItem = pricePerItem, QuantityOnHand = quantityOnHand, OurCostPerItem = ourCostPerItem, ValueOfItem = valueOfItem });

                                break;
                            }
                        }
                        if (!itemFound)
                        {
                            Console.WriteLine("Item {0} not found", changeitemCode);
                        }

                        break;
                    }

                case "3": //delete items in the list if this option is selected
                    {
                        Console.Write("Please enter an item ID No:");
                        string input = Console.ReadLine();
                        bool deleted = false;

                        for (int x = 0; x < itemData.Count; x++)
                        {
                            if (itemData[x].ItemCode.ToString() == input)
                            {
                                itemData.RemoveAt(x);
                                deleted = true;
                            }
                        }

                        if (deleted) // hint the user that you deleted the requested item
                        {
                            Console.WriteLine("Item deleted");
                        }
                        else // if did not find it, hint the user that you did not find it in your list
                        {
                            Console.WriteLine("Item {0} not found", input);
                        }                                                

                        break;
                    }

                case "4":  //list all items in current database if this option is selected
                    {
                        var header = String.Format($"{"ID", -10}{"Description", -22}{"Price", -12}{"QOH", -12}{"Cost", -12}{"Value", -12}\n");
                        Console.WriteLine(header);

                        for (int x = 0; x < itemData.Count; x++)
                        {
                            var output = String.Format($"{itemData[x].ItemCode, -10}{itemData[x].Description, -22}{itemData[x].PricePerItem, -12:C}{itemData[x].QuantityOnHand, -12}{itemData[x].OurCostPerItem, -12:C}{itemData[x].ValueOfItem, -12:C}");
                            Console.WriteLine(output);
                        }
                        
                        break;  
                    }

                case "5": //quit the program if this option is selected
                    {                        
                        Console.Write("Are you sure that you want to quit(y/n)?");
                        string quitUserInput = Console.ReadLine();

                        if (quitUserInput == "y")
                        {
                            return;
                        }
                            break;
                    }

                default:
                    {
                        Console.Write("Invalid Option, try again\n---------------------------------------------------------------------------");
                        break;
                    }
                }
        }
    }
}